{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "9b829983-7d64-439e-ac09-5ba9000d58a6",
   "metadata": {},
   "source": [
    "# FDTD tidy3d\n",
    "\n",
    "gdsfactory simulation plugin for tidy3d\n",
    "[tidy3D is a FDTD web based software](https://simulation.cloud/)\n",
    "\n",
    "## Materials\n",
    "\n",
    "tidy3d provides you with a material database of dispersive materials."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8663bc31-aa1d-4323-b345-e3a76c0e06ce",
   "metadata": {},
   "outputs": [],
   "source": [
    "# basic ipython configuration (reload source code automatically and plots inline)\n",
    "%load_ext autoreload\n",
    "%autoreload 2\n",
    "%matplotlib inline\n",
    "\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "import tidy3d as td\n",
    "from tidy3d import web\n",
    "\n",
    "import gdsfactory as gf\n",
    "import gdsfactory.simulation.gtidy3d as gt\n",
    "import gdsfactory.simulation as sim"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "365561c0-9716-4e51-96ae-14e4c916a12f",
   "metadata": {},
   "outputs": [],
   "source": [
    "nm = 1e-3\n",
    "wavelength = np.linspace(1500, 1600) * nm\n",
    "f = td.C_0 / wavelength\n",
    "eps_complex = gt.materials.material_library[\"cSi\"][\"Li1993_293K\"].eps_model(f)\n",
    "n, k = td.Medium.eps_complex_to_nk(eps_complex)\n",
    "plt.plot(wavelength, n)\n",
    "plt.title(\"cSi crystalline silicon\")\n",
    "plt.xlabel(\"wavelength\")\n",
    "plt.ylabel(\"n\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "206789cc-53fc-4af8-adec-09433aecb0a9",
   "metadata": {},
   "outputs": [],
   "source": [
    "eps_complex = gt.materials.material_library[\"Si3N4\"][\"Luke2015\"].eps_model(f)\n",
    "n, k = td.Medium.eps_complex_to_nk(eps_complex)\n",
    "plt.plot(wavelength, n)\n",
    "plt.title(\"SiN\")\n",
    "plt.xlabel(\"wavelength\")\n",
    "plt.ylabel(\"n\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "26146dbe-497a-4e6d-bb15-fa6ad3962896",
   "metadata": {},
   "outputs": [],
   "source": [
    "eps_complex = gt.materials.material_library[\"SiO2\"][\"Horiba\"].eps_model(f)\n",
    "n, k = td.Medium.eps_complex_to_nk(eps_complex)\n",
    "plt.plot(wavelength, n)\n",
    "plt.title(\"SiO2\")\n",
    "plt.xlabel(\"wavelength\")\n",
    "plt.ylabel(\"n\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a2860590-7e0e-47c4-89d2-ff5d33e1f140",
   "metadata": {},
   "source": [
    "## get_simulation\n",
    "\n",
    "You can run `get_simulation` to convert a gdsfactory planar Component into a tidy3d simulation and make sure the simulation looks correct before running it\n",
    "\n",
    "`get_simulation` also has a `plot_modes` option so you can make sure you are monitoring the desired mode."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6fe01cf7-9b77-4f6e-bfc9-3c4c558b5270",
   "metadata": {},
   "source": [
    "### 2D\n",
    "\n",
    "2D planar simulations run faster than 3D. When running in 2D we don't consider the component thickness in the z dimension"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "de6b3c2a-4e64-4d22-8412-1fcffe1ed45b",
   "metadata": {},
   "outputs": [],
   "source": [
    "c = gf.components.mmi1x2()\n",
    "s = gt.get_simulation(c, is_3d=False)\n",
    "fig = gt.plot_simulation(s)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9e730b10-e895-465b-9687-ff3dbd449a90",
   "metadata": {},
   "source": [
    "### 3D\n",
    "\n",
    "By default all simulations run in 3D unless indicated otherwise with the `is_3d` argument.\n",
    "3D simulations still run quite fast thanks to the GPU solver on the server side."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "fa8787bc-09c7-4cc4-8c21-0f0c50756686",
   "metadata": {},
   "outputs": [],
   "source": [
    "help(gt.get_simulation)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b8f072ee-e758-4144-a92a-157c933fa2d6",
   "metadata": {},
   "outputs": [],
   "source": [
    "c = gf.components.mmi1x2()\n",
    "s = gt.get_simulation(c)\n",
    "fig = gt.plot_simulation(s)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9be3ce45-460e-4e56-a696-c026901aa5d2",
   "metadata": {},
   "outputs": [],
   "source": [
    "c = gf.components.coupler_ring()\n",
    "s = gt.get_simulation(c)\n",
    "fig = gt.plot_simulation(s)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f9afb121-f47b-4b02-b224-c240711d66c3",
   "metadata": {},
   "outputs": [],
   "source": [
    "c = gf.components.bend_circular(radius=2)\n",
    "s = gt.get_simulation(c)\n",
    "fig = gt.plot_simulation(s)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e70fceaa-7e32-40d2-a006-605c97e64a4b",
   "metadata": {},
   "outputs": [],
   "source": [
    "c = gf.components.straight()\n",
    "s = gt.get_simulation(c)\n",
    "fig = gt.plot_simulation(s)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fc9305ce-dfcd-4ed6-ae25-fd05f286e926",
   "metadata": {},
   "source": [
    "## Sidewall angle\n",
    "\n",
    "You can define the sidewall angle in degrees with respect to normal. Lets exaggerate the sidewall angle so we can clearly see it."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "810d2990-e21d-4e17-9dbb-e0942287c1c8",
   "metadata": {},
   "outputs": [],
   "source": [
    "c = gf.components.straight()\n",
    "s = gt.get_simulation(c, sidewall_angle_deg=45, plot_modes=True)\n",
    "fig = gt.plot_simulation(s)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "65001c2f-fce5-41b1-acd1-69afbaf3390d",
   "metadata": {},
   "source": [
    "## Erosion / dilation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6586a51a-3ff5-4657-97f0-3e0a07f47ab1",
   "metadata": {},
   "outputs": [],
   "source": [
    "c = gf.components.straight()\n",
    "s = gt.get_simulation(c, is_3d=False, dilation=0)\n",
    "fig = gt.plot_simulation(s)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2153bdf2-a6e8-4543-97bf-f69a6e6517a1",
   "metadata": {},
   "outputs": [],
   "source": [
    "c = gf.components.straight()\n",
    "s = gt.get_simulation(c, is_3d=False, dilation=0.5)\n",
    "fig = gt.plot_simulation(s)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1af5f7d2-31bc-4099-809e-49b638003083",
   "metadata": {},
   "outputs": [],
   "source": [
    "0.5 * 1.5"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b3749d63-c756-4213-a196-53a65647e538",
   "metadata": {},
   "source": [
    "A `dilation = 0.5` makes a 0.5um waveguide 0.75um"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a6fd5afa-bef0-462f-bc55-a7f29af0f31d",
   "metadata": {},
   "outputs": [],
   "source": [
    "0.5 * 0.8"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0772d362-112a-4ba6-9674-404e607cdadc",
   "metadata": {},
   "source": [
    "A `dilation = -0.2` makes a 0.5um eroded down to 0.1um"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "70644e52-e539-4ad7-8491-4fca50cfab9c",
   "metadata": {},
   "outputs": [],
   "source": [
    "0.2 * 0.5"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3f580a2f-7e3d-4c56-bc64-d67e08206db6",
   "metadata": {},
   "outputs": [],
   "source": [
    "c = gf.components.straight()\n",
    "s = gt.get_simulation(c, is_3d=False, dilation=-0.2)\n",
    "fig = gt.plot_simulation(s)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "55f43708-e26e-41cc-972f-2edaaf50b885",
   "metadata": {},
   "source": [
    "## Plot source and monitor modes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "94099cc3-4094-415d-a3e9-fd7dfb829cc0",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "import tidy3d as td\n",
    "from tidy3d import web\n",
    "import gdsfactory as gf\n",
    "import gdsfactory.simulation.gtidy3d as gt\n",
    "\n",
    "c = gf.components.straight(length=3)\n",
    "sim = gt.get_simulation(c, plot_modes=True, port_margin=1, ymargin=1)\n",
    "fig = gt.plot_simulation_xz(sim)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1510ccc9-6fd5-4bd2-b3ff-4fff4d1e915f",
   "metadata": {},
   "outputs": [],
   "source": [
    "c = gf.components.straight_rib(length=3)\n",
    "sim = gt.get_simulation(c, plot_modes=True)\n",
    "fig = gt.plot_simulation_xz(sim)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "15ce5eb1-6a56-43a6-ad84-763e88b47094",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "import tidy3d as td\n",
    "from tidy3d import web\n",
    "\n",
    "import gdsfactory as gf\n",
    "import gdsfactory.simulation.gtidy3d as gt\n",
    "import gdsfactory.simulation as sim\n",
    "from gdsfactory.components.taper import taper_sc_nc\n",
    "\n",
    "c = taper_sc_nc(length=10)\n",
    "s = gt.get_simulation(c, plot_modes=True)\n",
    "fig = gt.plot_simulation_xz(s)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0cd33ab4-ee1e-4133-afc6-bfe1d769de85",
   "metadata": {},
   "source": [
    "Lets make sure the mode also looks correct on the Nitride side"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "61f88f54-eae3-4bd1-ab63-b4f80fdc9a51",
   "metadata": {},
   "outputs": [],
   "source": [
    "c = taper_sc_nc(length=10)\n",
    "s = gt.get_simulation(c, port_source_name=\"o2\", plot_modes=True)\n",
    "fig = gt.plot_simulation_xz(s)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "69c07450-7169-41c0-a4cd-e02c743f8191",
   "metadata": {},
   "outputs": [],
   "source": [
    "components = [\n",
    "    \"bend_euler\",\n",
    "    \"bend_s\",\n",
    "    \"coupler\",\n",
    "    \"coupler_ring\",\n",
    "    \"crossing\",\n",
    "    \"mmi1x2\",\n",
    "    \"mmi2x2\",\n",
    "    \"taper\",\n",
    "    \"straight\",\n",
    "]\n",
    "\n",
    "for component_name in components:\n",
    "    print(component_name)\n",
    "    plt.figure()\n",
    "    c = gf.components.cells[component_name]()\n",
    "    s = gt.get_simulation(c)\n",
    "    fig = gt.plot_simulation(s)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d006c439-606e-422d-b11f-dfeeb115f968",
   "metadata": {},
   "source": [
    "## write_sparameters\n",
    "\n",
    "You can write Sparameters from a simulation as well as a group of simulations in parallel.\n",
    "\n",
    "Each Sparameter runs on a different thread as it needs to monitor each job sent to the tidy3d server."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9a51491b-1559-458f-abe2-9a77105a2be5",
   "metadata": {},
   "source": [
    "```python\n",
    "c = gf.components.straight()\n",
    "s = gt.get_sparameters(c)\n",
    "```\n",
    "\n",
    "```python\n",
    "for component_name, component_factory in gf.components._factory_passives.items():\n",
    "    c = component_factory()\n",
    "    s = gt.get_sparameters(c)\n",
    "\n",
    "```"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "eb9b626d-0d6f-4265-bc10-18b6e3720f4c",
   "metadata": {},
   "outputs": [],
   "source": [
    "c = gf.components.bend_circular(radius=2)\n",
    "s = gt.get_simulation(c)\n",
    "fig = gt.plot_simulation(s)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "73edf524-154e-4aae-86f6-b129eab5eb93",
   "metadata": {},
   "source": [
    "For a 2 port reciprocal passive component you can always assume `s21 = s12`\n",
    "\n",
    "Another approximation you can make for planar devices is that `s11 = s22`, which saves 1 extra simulation\n",
    "\n",
    "This approximation only works well for straight and bends\n",
    "\n",
    "we call this `1x1` port symmetry"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d0b97547-84b7-41e4-a51c-d72af6cbd9ff",
   "metadata": {},
   "outputs": [],
   "source": [
    "df = gt.write_sparameters_1x1(c)\n",
    "sim.plot.plot_sparameters(df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d54186a6-70c9-4bc0-8e70-b5daaa4cd91d",
   "metadata": {},
   "outputs": [],
   "source": [
    "sim.plot.plot_sparameters(df, keys=(\"o2@0,o1@0\",))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "84e6e46b-8311-4bd0-a545-fee383e43b54",
   "metadata": {},
   "outputs": [],
   "source": [
    "import gdsfactory as gf\n",
    "import gdsfactory.simulation.gtidy3d as gt\n",
    "\n",
    "c = gf.components.mmi1x2()\n",
    "s = gt.get_simulation(c, plot_modes=True, port_margin=0.2, port_source_name=\"o2\")\n",
    "fig = gt.plot_simulation(s, y=0)  # see input"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "75ba0162-82b9-4415-af62-0d127f30267d",
   "metadata": {},
   "outputs": [],
   "source": [
    "fig = gt.plot_simulation(s, y=0.63)  # see output"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9a6d9365-f2b3-4a4f-b092-c95c7a8e6f51",
   "metadata": {},
   "outputs": [],
   "source": [
    "# df = gt.write_sparameters(c, wavelength_start=1.5, wavelength_stop=1.6, grid_spec=td.GridSpec.uniform(dl=50*nm))\n",
    "# df = gt.write_sparameters(c)\n",
    "# df = gt.write_sparameters(c, wavelength_start=1.520, wavelength_stop=1.580, port_margin=0.6, ymargin=2)\n",
    "# df = gt.write_sparameters(c, wavelength_start=1.520, wavelength_stop=1.580, port_margin=0.9)\n",
    "df = gt.write_sparameters(c)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "157a282c-f5b7-46d1-9ce6-656afc26f8ab",
   "metadata": {},
   "outputs": [],
   "source": [
    "import gdsfactory.simulation as sim"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4ee2d55d-c228-4263-92f4-fb0fff756b5e",
   "metadata": {},
   "outputs": [],
   "source": [
    "sim.plot.plot_sparameters(df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f6e89dfc-694c-417e-b941-ab310f3be57d",
   "metadata": {},
   "outputs": [],
   "source": [
    "sim.plot.plot_sparameters(df, keys=(\"o1@0,o2@0\", \"o1@0,o3@0\"))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a8cf0947-48ae-428b-8933-e76bc71de8cb",
   "metadata": {},
   "source": [
    "## write_sparameters_batch\n",
    "\n",
    "You can also send a batch of component simulations in parallel to the tidy3d server.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ce8d2e60-9592-4954-9b30-563c5904adaf",
   "metadata": {},
   "outputs": [],
   "source": [
    "jobs = [dict(component=gf.c.straight(length=1.11 + i)) for i in [1, 2]]\n",
    "dfs = gt.write_sparameters_batch_1x1(jobs)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6fafc1a1-acee-4419-b8d6-c16423ba7aae",
   "metadata": {},
   "outputs": [],
   "source": [
    "df1 = dfs[0]\n",
    "sim.plot.plot_sparameters(df1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "62532ab9-0ba2-4ce3-8146-c2e499c06e49",
   "metadata": {},
   "outputs": [],
   "source": [
    "df2 = dfs[1]\n",
    "sim.plot.plot_sparameters(df2)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "01162351-c4bf-4efe-88c0-11426936eaac",
   "metadata": {},
   "source": [
    "## get_simulation_grating_coupler\n",
    "\n",
    "You can also expand the planar component simulations to simulate an out-of-plane grating coupler.\n",
    "\n",
    "The following simulations run in 2D but can also run in 3D."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "30b8998d-157d-4467-ab5b-c3f73098076c",
   "metadata": {},
   "outputs": [],
   "source": [
    "help(gt.get_simulation_grating_coupler)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "54271029-e393-46df-8bcf-e23cee8cf322",
   "metadata": {},
   "outputs": [],
   "source": [
    "import gdsfactory as gf\n",
    "import gdsfactory.simulation.gtidy3d as gt\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "913c6d42-8a10-4f3b-8f41-13d75fb5774a",
   "metadata": {},
   "outputs": [],
   "source": [
    "c = (\n",
    "    gf.components.grating_coupler_elliptical_lumerical()\n",
    ")  # inverse design grating apodized\n",
    "fiber_angle_deg = 5\n",
    "s = gt.get_simulation_grating_coupler(\n",
    "    c, is_3d=False, fiber_angle_deg=fiber_angle_deg, fiber_xoffset=0\n",
    ")\n",
    "f = gt.plot_simulation(s)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e4efbdca-9921-4a1a-a8ed-4556aad8f65c",
   "metadata": {},
   "outputs": [],
   "source": [
    "f = c.plot()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7325131e-22f4-4e02-8854-3023a31cf78b",
   "metadata": {},
   "source": [
    "Lets compare the xtolerance of a constant pitch vs an apodized grating.\n",
    "\n",
    "We run simulations in 2D for faster.\n",
    "\n",
    "Lets simulate 2 different grating couplers:\n",
    "\n",
    "- apodized inverse design example from lumerical website (5 degrees fiber angle)\n",
    "- constant pitch grating from gdsfactory generic PDK (20 degrees fiber angle)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6b7f3df3-099f-4442-bac5-1c5d5f640b97",
   "metadata": {},
   "outputs": [],
   "source": [
    "sim = gt.get_simulation_grating_coupler(\n",
    "    c, is_3d=False, fiber_angle_deg=fiber_angle_deg, fiber_xoffset=-5\n",
    ")\n",
    "f = gt.plot_simulation(sim)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7eff8a2b-adf7-4fd2-96d9-48d7746f2182",
   "metadata": {},
   "outputs": [],
   "source": [
    "sim = gt.get_simulation_grating_coupler(\n",
    "    c, is_3d=False, fiber_angle_deg=fiber_angle_deg, fiber_xoffset=+5\n",
    ")\n",
    "f = gt.plot_simulation(sim)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e3d5bf6b-f7f7-4885-99ab-7c92b51b1dbf",
   "metadata": {},
   "outputs": [],
   "source": [
    "offsets = np.arange(-5, 6, 5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6a6cdd12-ba26-471e-9bd4-21ff3d24964c",
   "metadata": {},
   "outputs": [],
   "source": [
    "jobs = [\n",
    "    dict(\n",
    "        component=c,\n",
    "        is_3d=False,\n",
    "        fiber_angle_deg=fiber_angle_deg,\n",
    "        fiber_xoffset=fiber_xoffset,\n",
    "    )\n",
    "    for fiber_xoffset in offsets\n",
    "]\n",
    "dfs = gt.write_sparameters_grating_coupler_batch(jobs)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a44a861e-4177-4294-9957-d1277543b9fb",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "\n",
    "log = lambda x: 20 * np.log10(x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7d4c12b5-1a62-44f8-b11a-797bd580f5b5",
   "metadata": {},
   "outputs": [],
   "source": [
    "for offset in offsets:\n",
    "    sp = gt.write_sparameters_grating_coupler(\n",
    "        c, is_3d=False, fiber_angle_deg=fiber_angle_deg, fiber_xoffset=offset\n",
    "    )\n",
    "    plt.plot(\n",
    "        sp[\"wavelengths\"], 20 * np.log10(np.abs(sp[\"o2@0,o1@0\"])), label=str(offset)\n",
    "    )\n",
    "\n",
    "plt.xlabel(\"wavelength (um\")\n",
    "plt.ylabel(\"Transmission (dB)\")\n",
    "plt.title(\"transmission vs fiber xoffset (um)\")\n",
    "plt.legend()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b007b2cd-3e60-43c7-86a2-8328b08fcf7e",
   "metadata": {},
   "outputs": [],
   "source": [
    "fiber_angles = [3, 5, 7]\n",
    "jobs = [\n",
    "    dict(component=c, is_3d=False, fiber_angle_deg=fiber_angle_deg)\n",
    "    for fiber_angle_deg in fiber_angles\n",
    "]\n",
    "dfs = gt.write_sparameters_grating_coupler_batch(jobs)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b37b371d-8f36-4448-b868-ddddf9fca1ca",
   "metadata": {},
   "outputs": [],
   "source": [
    "for fiber_angle_deg in fiber_angles:\n",
    "    sp = gt.write_sparameters_grating_coupler(\n",
    "        c, is_3d=False, fiber_angle_deg=fiber_angle_deg\n",
    "    )\n",
    "    plt.plot(\n",
    "        sp[\"wavelengths\"],\n",
    "        20 * np.log10(np.abs(sp[\"o2@0,o1@0\"])),\n",
    "        label=str(fiber_angle_deg),\n",
    "    )\n",
    "\n",
    "plt.xlabel(\"wavelength (um\")\n",
    "plt.ylabel(\"Transmission (dB)\")\n",
    "plt.title(\"transmission vs fiber angle (degrees)\")\n",
    "plt.legend()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5647fe16-e654-4a37-96fd-80dfa2b94548",
   "metadata": {},
   "outputs": [],
   "source": [
    "c = gf.components.grating_coupler_elliptical_arbitrary(\n",
    "    widths=[0.343] * 25, gaps=[0.345] * 25\n",
    ")\n",
    "f = c.plot()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "cbad9482-707a-443a-a170-41f6a6def026",
   "metadata": {},
   "outputs": [],
   "source": [
    "fiber_angle_deg = 20\n",
    "sim = gt.get_simulation_grating_coupler(\n",
    "    c, is_3d=False, fiber_angle_deg=fiber_angle_deg, fiber_xoffset=0\n",
    ")\n",
    "f = gt.plot_simulation(sim, figsize=(22, 8))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "55dbc871-1d69-4abd-83f9-75d10a611e9b",
   "metadata": {},
   "outputs": [],
   "source": [
    "offsets = np.arange(-10, 11, 5)\n",
    "offsets"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1e8d142d-2895-446d-b352-9ff4c785074b",
   "metadata": {},
   "outputs": [],
   "source": [
    "jobs = [\n",
    "    dict(\n",
    "        component=c,\n",
    "        is_3d=False,\n",
    "        fiber_angle_deg=fiber_angle_deg,\n",
    "        fiber_xoffset=fiber_xoffset,\n",
    "    )\n",
    "    for fiber_xoffset in offsets\n",
    "]\n",
    "dfs = gt.write_sparameters_grating_coupler_batch(jobs)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "892c37d8-2c2d-4182-8906-1e92802784e2",
   "metadata": {},
   "outputs": [],
   "source": [
    "for offset in offsets:\n",
    "    sp = gt.write_sparameters_grating_coupler(\n",
    "        c, is_3d=False, fiber_angle_deg=fiber_angle_deg, fiber_xoffset=offset\n",
    "    )\n",
    "    plt.plot(\n",
    "        sp[\"wavelengths\"], 20 * np.log10(np.abs(sp[\"o2@0,o1@0\"])), label=str(offset)\n",
    "    )\n",
    "\n",
    "plt.xlabel(\"wavelength (um\")\n",
    "plt.ylabel(\"Transmission (dB)\")\n",
    "plt.title(\"transmission vs xoffset\")\n",
    "plt.legend()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8d9ec06a-190a-4186-bdb7-581dac9ab4f5",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
