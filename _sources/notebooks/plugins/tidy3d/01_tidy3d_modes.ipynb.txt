{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "f9bd8640-22b8-4f38-9ace-54f6c329d258",
   "metadata": {},
   "source": [
    "# Tidy3D mode solver\n",
    "\n",
    "## Waveguides"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "93e34a98-7fe7-4bbe-95ee-a5d8d94a5259",
   "metadata": {},
   "outputs": [],
   "source": [
    "import gdsfactory.simulation.gtidy3d as gt\n",
    "\n",
    "nm = 1e-3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5d23a15a",
   "metadata": {},
   "outputs": [],
   "source": [
    "strip = gt.modes.Waveguide(\n",
    "    wavelength=1.55,\n",
    "    wg_width=0.5,\n",
    "    wg_thickness=0.22,\n",
    "    slab_thickness=0.0,\n",
    "    ncore=gt.modes.si,\n",
    "    nclad=gt.modes.sio2,\n",
    ")\n",
    "strip.plot_index()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "60dcd64d",
   "metadata": {},
   "outputs": [],
   "source": [
    "strip.plot_Ex(0)  # TE\n",
    "strip.plot_Ey(1)  # TM"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "aeee769d-0f21-44dd-8cc8-4b8e186bb6d4",
   "metadata": {},
   "outputs": [],
   "source": [
    "rib = gt.modes.Waveguide(\n",
    "    wavelength=1.55,\n",
    "    wg_width=0.5,\n",
    "    wg_thickness=0.22,\n",
    "    slab_thickness=0.15,\n",
    "    ncore=gt.modes.si,\n",
    "    nclad=gt.modes.sio2,\n",
    ")\n",
    "rib.plot_index()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "dcda6632-f368-427f-a6c8-e65afc6a2306",
   "metadata": {},
   "outputs": [],
   "source": [
    "rib.plot_Ex(mode_index=0)\n",
    "rib.plot_Ey(mode_index=0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2e1ac745",
   "metadata": {},
   "outputs": [],
   "source": [
    "nitride = gt.modes.Waveguide(\n",
    "    wavelength=1.55,\n",
    "    wg_width=1.0,\n",
    "    wg_thickness=0.4,\n",
    "    slab_thickness=0.0,\n",
    "    ncore=gt.modes.sin,\n",
    "    nclad=gt.modes.sio2,\n",
    ")\n",
    "nitride.plot_index()\n",
    "nitride.plot_Ex(0)\n",
    "nitride.plot_Ey(0)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1b22eef9-6c46-41fe-a1a4-46638fc7f437",
   "metadata": {},
   "source": [
    "## Sweep width\n",
    "\n",
    "You can sweep the waveguide width and compute the modes."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9e395e46-a14a-4e19-b86e-32c6f86618b5",
   "metadata": {},
   "outputs": [],
   "source": [
    "df = gt.modes.sweep_width(\n",
    "    width1=200 * nm,\n",
    "    width2=1000 * nm,\n",
    "    steps=11,\n",
    "    wavelength=1.55,\n",
    "    wg_thickness=220 * nm,\n",
    "    slab_thickness=0 * nm,\n",
    "    ncore=gt.modes.si,\n",
    "    nclad=gt.modes.sio2,\n",
    ")\n",
    "gt.modes.plot_sweep_width(\n",
    "    width1=200 * nm,\n",
    "    width2=1000 * nm,\n",
    "    steps=11,\n",
    "    wavelength=1.55,\n",
    "    wg_thickness=220 * nm,\n",
    "    slab_thickness=0 * nm,\n",
    "    ncore=gt.modes.si,\n",
    "    nclad=gt.modes.sio2,\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0f8d5d20-e0f8-4fe5-82f7-14056e94d4ca",
   "metadata": {},
   "source": [
    "## Group index\n",
    "\n",
    "You can also compute the group index for a waveguide."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7e7e2ad4-5ea3-43e0-8656-4b5d526c09c8",
   "metadata": {},
   "outputs": [],
   "source": [
    "import gdsfactory.simulation.gtidy3d as gt\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "nm = 1e-3\n",
    "\n",
    "ng = gt.modes.group_index(\n",
    "    wg_width=500 * nm,\n",
    "    wavelength=1.55,\n",
    "    wg_thickness=220 * nm,\n",
    "    slab_thickness=0 * nm,\n",
    "    ncore=gt.modes.si,\n",
    "    nclad=gt.modes.sio2,\n",
    ")\n",
    "print(ng)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "141b61d9-a8c1-4f01-9ca5-f6d6110f0e28",
   "metadata": {},
   "outputs": [],
   "source": [
    "wavelengths = np.arange(1500, 1601, 50) * 1e-3\n",
    "wg_widths = np.arange(400, 601, 50) * 1e-3\n",
    "\n",
    "wg_settings = dict(\n",
    "    wg_thickness=220 * nm,\n",
    "    slab_thickness=0 * nm,\n",
    "    ncore=gt.modes.si,\n",
    "    nclad=gt.modes.sio2,\n",
    ")\n",
    "\n",
    "for wg_width in wg_widths:\n",
    "    ng = [\n",
    "        gt.modes.group_index(wavelength=wavelength, wg_width=wg_width, **wg_settings)\n",
    "        for wavelength in wavelengths\n",
    "    ]\n",
    "    plt.plot(wavelengths, ng, label=f\"{wg_width*1e3}\")\n",
    "\n",
    "plt.legend()\n",
    "plt.xlabel(\"Wavelength (um)\")\n",
    "plt.xlabel(\"ng\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "055d38f7-4916-4d49-86bf-81acf3964281",
   "metadata": {},
   "source": [
    "## Bend modes\n",
    "\n",
    "You can compute bend modes specifying the bend radius."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "157fc2fe-9037-419d-8e39-ae9191871552",
   "metadata": {},
   "outputs": [],
   "source": [
    "strip_bend = gt.modes.Waveguide(\n",
    "    wavelength=1.55,\n",
    "    wg_width=0.5,\n",
    "    wg_thickness=0.22,\n",
    "    slab_thickness=0.0,\n",
    "    bend_radius=3,\n",
    "    ncore=gt.modes.si,\n",
    "    nclad=gt.modes.sio2,\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "14899a2b",
   "metadata": {},
   "outputs": [],
   "source": [
    "# lets plot the fundamental TE mode\n",
    "strip_bend.plot_Ex(0)\n",
    "strip_bend.plot_Ey(0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "15095b57",
   "metadata": {},
   "outputs": [],
   "source": [
    "# lets plot the fundamental TM mode\n",
    "strip_bend.plot_Ex(1)\n",
    "strip_bend.plot_Ey(1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "43100bb1",
   "metadata": {},
   "source": [
    "## Bend loss\n",
    "\n",
    "You can also compute the losses coming from the mode mismatch from the bend into a straight waveguide.\n",
    "To compute the bend loss due to mode mismatch you can calculate the mode overlap of the straight mode and the bent mode.\n",
    "Because there are two mode mismatch interfaces the total loss due to mode mismatch will be squared (from bend to straight and from straight to bend).\n",
    "\n",
    "![](https://i.imgur.com/M1Yysdr.png)\n",
    "\n",
    "[from paper](https://ieeexplore.ieee.org/ielaam/50/8720127/8684870-aam.pdf)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a8ff2d99",
   "metadata": {},
   "outputs": [],
   "source": [
    "import gdsfactory.simulation.gtidy3d as gt\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "r, integral = gt.modes.sweep_bend_loss(\n",
    "    wavelength=1.55,\n",
    "    wg_width=0.5,\n",
    "    wg_thickness=0.22,\n",
    "    slab_thickness=0.0,\n",
    "    ncore=gt.modes.si,\n",
    "    nclad=gt.modes.sio2,\n",
    "    bend_radius_min=2.0,\n",
    "    bend_radius_max=5,\n",
    "    steps=4,\n",
    "    mode_index=0,\n",
    ")\n",
    "\n",
    "plt.plot(r, integral, \".\")\n",
    "plt.xlabel(\"bend radius (um)\")\n",
    "plt.ylabel(\"Transmission\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "28003695-d5e4-4c1f-835a-b49c7b903ede",
   "metadata": {},
   "source": [
    "## Waveguide coupler\n",
    "\n",
    "You can also compute the modes of a waveguide coupler.\n",
    "\n",
    "```\n",
    "        wg_width1     wg_width2\n",
    "        <------->     <------->\n",
    "         _______   |   _______   __\n",
    "        |       |  |  |       | |\n",
    "        |       |  |  |       | |\n",
    "        |       |_____|       | | wg_thickness\n",
    "        |slab_thickness       | |\n",
    "        |_____________________| |__\n",
    "                <----->\n",
    "                  gap\n",
    "\n",
    "\n",
    "```"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4f461b95-a6a5-4ce6-bdee-ab637f940495",
   "metadata": {},
   "outputs": [],
   "source": [
    "si = gt.modes.si\n",
    "sio2 = gt.modes.sio2\n",
    "c = gt.modes.WaveguideCoupler(\n",
    "    wavelength=1.55,\n",
    "    wg_width1=500 * nm,\n",
    "    wg_width2=500 * nm,\n",
    "    gap=200 * nm,\n",
    "    wg_thickness=220 * nm,\n",
    "    slab_thickness=100 * nm,\n",
    "    ncore=si,\n",
    "    nclad=sio2,\n",
    ")\n",
    "c.plot_index()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "db581f14-3734-4b29-af51-771aa02d1d38",
   "metadata": {},
   "outputs": [],
   "source": [
    "c.plot_Ex(0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7183d5d6-30cf-4f50-85dc-f40acea689cf",
   "metadata": {},
   "outputs": [],
   "source": [
    "c.plot_Ex(1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b7735ded-48de-4b8c-89da-31cd8fbdc80e",
   "metadata": {},
   "outputs": [],
   "source": [
    "c = gt.modes.WaveguideCoupler(\n",
    "    wavelength=1.55,\n",
    "    wg_width1=500 * nm,\n",
    "    wg_width2=500 * nm,\n",
    "    gap=200 * nm,\n",
    "    wg_thickness=220 * nm,\n",
    "    slab_thickness=0 * nm,\n",
    "    ncore=si,\n",
    "    nclad=sio2,\n",
    ")\n",
    "c.plot_index()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a2dc4ebb-ec92-4b41-a03a-0ba35ee0e808",
   "metadata": {},
   "outputs": [],
   "source": [
    "c.plot_Ex(0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a586f1f9-79ca-46e4-9c6e-a5b623028878",
   "metadata": {},
   "outputs": [],
   "source": [
    "c.plot_Ex(1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d840f439-6edf-4b10-9e32-88b89fc512c4",
   "metadata": {},
   "outputs": [],
   "source": [
    "import gdsfactory.simulation.gtidy3d as gt\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "cca428b6-56e7-4055-9da0-4554d625e01f",
   "metadata": {},
   "outputs": [],
   "source": [
    "nm = 1e-3\n",
    "si = gt.modes.si\n",
    "sio2 = gt.modes.sio2\n",
    "c = gt.modes.WaveguideCoupler(\n",
    "    wavelength=1.55,\n",
    "    wg_width1=500 * nm,\n",
    "    wg_width2=500 * nm,\n",
    "    gap=200 * nm,\n",
    "    wg_thickness=220 * nm,\n",
    "    slab_thickness=0 * nm,\n",
    "    ncore=si,\n",
    "    nclad=sio2,\n",
    ")\n",
    "c.plot_index()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "310e0e43-f62e-47d0-9d1a-4060a700410f",
   "metadata": {},
   "outputs": [],
   "source": [
    "gaps = [150, 200, 250, 300]\n",
    "coupling_length = [\n",
    "    gt.modes.WaveguideCoupler(\n",
    "        wavelength=1.55,\n",
    "        wg_width1=500 * nm,\n",
    "        wg_width2=500 * nm,\n",
    "        gap=gap * nm,\n",
    "        wg_thickness=220 * nm,\n",
    "        slab_thickness=0 * nm,\n",
    "        ncore=si,\n",
    "        nclad=sio2,\n",
    "    ).find_coupling(power_ratio=1)\n",
    "    for gap in gaps\n",
    "]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e30a799f-a590-4835-8e69-b86f46208320",
   "metadata": {},
   "outputs": [],
   "source": [
    "plt.plot(gaps, coupling_length, \".\")\n",
    "plt.xlabel(\"gap (nm)\")\n",
    "plt.ylabel(\"100% coupling length (um)\")"
   ]
  }
 ],
 "metadata": {
  "interpreter": {
   "hash": "2f4f03439a4f7fdbec20f068c10212f0605861ac4e039c961c463b9a5ef880c6"
  },
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
