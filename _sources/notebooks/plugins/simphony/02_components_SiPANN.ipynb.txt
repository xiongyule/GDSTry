{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# SiPANN\n",
    "\n",
    "We can also leverage the sipann compact model library.\n",
    "\n",
    "SIPANN provides with a linear regression fit from mode solver simulations to compute the Sparameters."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Straight"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import gdsfactory as gf\n",
    "import gdsfactory.simulation.sipann as gs\n",
    "\n",
    "\n",
    "def pltAttr(x, y, title=None, legend=\"upper right\", save=None):\n",
    "    if legend is not None:\n",
    "        plt.legend(loc=legend)\n",
    "    plt.xlabel(x)\n",
    "    plt.ylabel(y)\n",
    "    if title is not None:\n",
    "        plt.title(title)\n",
    "    if save is not None:\n",
    "        plt.savefig(save)\n",
    "\n",
    "\n",
    "s = gs.straight(width=0.5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "hr = gs.straight(wg_width=0.45, length_x=20.0)\n",
    "width = np.linspace(300, 500, 100)\n",
    "wavelength = 1550\n",
    "hr.update(width=width)\n",
    "t = hr.predict(wavelength)\n",
    "\n",
    "title = \"Straight $\\lambda=1550$ 20um long\"\n",
    "plt.figure(figsize=(15, 5))\n",
    "plt.subplot(121)\n",
    "plt.plot(width, np.abs(t) ** 2, label=\"t\")\n",
    "pltAttr(\"width (nm)\", \"|S|\", title)\n",
    "\n",
    "plt.subplot(122)\n",
    "plt.plot(width, -np.unwrap(np.angle(t)), label=\"t\")\n",
    "pltAttr(\"width (nm)\", \"Phase (rad)\", title)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Coupler ring"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Lets look at the layout of a coupler_ring\n",
    "gf.components.coupler_ring()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "hr = gs.coupler_ring()\n",
    "r = np.linspace(5000, 50000, 100)\n",
    "wavelength = 1550\n",
    "hr.update(radius=r)\n",
    "\n",
    "k = hr.predict((1, 4), wavelength)\n",
    "t = hr.predict((1, 3), wavelength)\n",
    "\n",
    "plt.figure(figsize=(15, 5))\n",
    "plt.subplot(121)\n",
    "plt.plot(r / 1e3, np.abs(k) ** 2, label=\"k\")\n",
    "plt.plot(r / 1e3, np.abs(t) ** 2, label=\"t\")\n",
    "pltAttr(\"Radius (um)\", \"Magnitude Squared\", \"HalfRing $\\lambda=1550$\")\n",
    "\n",
    "plt.subplot(122)\n",
    "plt.plot(r / 1e3, np.unwrap(np.angle(k)), label=\"k\")\n",
    "plt.plot(r / 1e3, -np.unwrap(np.angle(t)), label=\"t\")\n",
    "pltAttr(\"Radius (um)\", \"Phase (rad)\", \"HalfRing $\\lambda=1550$\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "hr = gs.coupler_ring(width=0.45, length_x=20.0)\n",
    "gap = np.linspace(200, 500, 100)\n",
    "wavelength = 1550\n",
    "hr.update(gap=gap)\n",
    "\n",
    "k = hr.predict((1, 4), wavelength)\n",
    "t = hr.predict((1, 3), wavelength)\n",
    "\n",
    "title = \"Half ring coupler $\\lambda=1550$ length=20um 450nm waveguides\"\n",
    "plt.figure(figsize=(15, 5))\n",
    "plt.subplot(121)\n",
    "plt.plot(gap, np.abs(k) ** 2 * 100, label=\"k\")\n",
    "plt.plot(gap, np.abs(t) ** 2 * 100, label=\"t\")\n",
    "pltAttr(\"gap (nm)\", \"Coupling (%)\", title)\n",
    "\n",
    "plt.subplot(122)\n",
    "plt.plot(gap, np.unwrap(np.angle(k)), label=\"k\")\n",
    "plt.plot(gap, -np.unwrap(np.angle(t)), label=\"t\")\n",
    "pltAttr(\"gap (nm)\", \"Phase (rad)\", title)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "plt.figure(figsize=(15, 5))\n",
    "plt.subplot(121)\n",
    "plt.plot(gap, np.abs(k) ** 2 * 100, label=\"k\")\n",
    "pltAttr(\"gap (nm)\", \"Coupling (%)\", \"HalfRing $\\lambda=1550$ 20um straight\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Coupler\n",
    "\n",
    "Model for evanescent coupler"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "gap = 0.236\n",
    "length = 20.0\n",
    "width = 0.5\n",
    "dx = 5.0\n",
    "dy = 5.0\n",
    "\n",
    "coupler_layout = gf.components.coupler(\n",
    "    gap=gap, length=length, width=width, dx=dx, dy=dy\n",
    ")\n",
    "coupler_layout.plot()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# lets see the default parameters for the circuit model\n",
    "gs.coupler?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# lets see the different parameters for the layout\n",
    "gf.components.coupler?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "c = gs.coupler(gap=gap, length=length, width=width, dx=dx, dy=dy)\n",
    "\n",
    "wavelength = np.linspace(1500, 1600, 500)\n",
    "k = c.predict((1, 4), wavelength)\n",
    "t = c.predict((1, 3), wavelength)\n",
    "\n",
    "plt.figure(figsize=(15, 5))\n",
    "plt.subplot(121)\n",
    "plt.plot(wavelength, np.abs(k) ** 2, label=\"k\")\n",
    "plt.plot(wavelength, np.abs(t) ** 2, label=\"t\")\n",
    "plt.xlabel(\"Wavelength (nm)\")\n",
    "plt.ylabel(\"Magnitude Squared\")\n",
    "plt.title(\"Crossover at $\\lambda \\approx 1550nm$\")\n",
    "plt.legend()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "hr = gs.coupler()\n",
    "length = np.linspace(1, 70, 100) * 1e3\n",
    "wavelength = 1550\n",
    "hr.update(length=length)\n",
    "\n",
    "k = hr.predict((1, 4), wavelength)\n",
    "t = hr.predict((1, 3), wavelength)\n",
    "\n",
    "plt.figure(figsize=(15, 5))\n",
    "plt.subplot(121)\n",
    "plt.plot(length / 1e3, np.abs(k) ** 2, label=\"k\")\n",
    "plt.plot(length / 1e3, np.abs(t) ** 2, label=\"t\")\n",
    "plt.xlabel(\"length (um)\")\n",
    "plt.ylabel(\"Magnitude Squared\")\n",
    "plt.title(\"Crossover at $\\lambda \\approx 1550nm$\")\n",
    "plt.legend()\n",
    "\n",
    "plt.subplot(122)\n",
    "plt.plot(length / 1e3, np.unwrap(np.angle(k)), label=\"k\")\n",
    "plt.plot(length / 1e3, -np.unwrap(np.angle(t)), label=\"t\")\n",
    "plt.xlabel(\"length (um)\")\n",
    "plt.ylabel(\"Magnitude Squared\")\n",
    "plt.title(\"Crossover at $\\lambda \\approx 1550nm$\")\n",
    "plt.legend()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Reproducing numbers from [thesis](https://www.photonics.intec.ugent.be/download/phd_216.pdf) page 88"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "hr = gs.coupler(length=10, gap=0.25, width=0.450)\n",
    "length = np.linspace(1, 45, 100) * 1e3\n",
    "wavelength = 1550\n",
    "hr.update(length=length)\n",
    "\n",
    "k = hr.predict((1, 4), wavelength)\n",
    "t = hr.predict((1, 3), wavelength)\n",
    "\n",
    "plt.figure(figsize=(15, 5))\n",
    "plt.subplot(121)\n",
    "plt.plot(length / 1e3, np.abs(k) ** 2, label=\"k\")\n",
    "plt.plot(length / 1e3, np.abs(t) ** 2, label=\"t\")\n",
    "plt.xlabel(\"Wavelength (nm)\")\n",
    "plt.ylabel(\"Magnitude Squared\")\n",
    "plt.title(\"Crossover at $\\lambda \\approx 1550nm$\")\n",
    "plt.legend()\n",
    "\n",
    "plt.subplot(122)\n",
    "plt.plot(length / 1e3, np.unwrap(np.angle(k)), label=\"k\")\n",
    "plt.plot(length / 1e3, -np.unwrap(np.angle(t)), label=\"t\")\n",
    "plt.xlabel(\"length (um)\")\n",
    "plt.ylabel(\"Magnitude Squared\")\n",
    "plt.title(\"Crossover at $\\lambda \\approx 1550nm$\")\n",
    "plt.legend()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "hr = gs.coupler(length=10, gap=0.13, width=0.5)\n",
    "length = np.linspace(1, 45, 100) * 1e3\n",
    "wavelength = 1550\n",
    "hr.update(length=length)\n",
    "\n",
    "k = hr.predict((1, 4), wavelength)\n",
    "t = hr.predict((1, 3), wavelength)\n",
    "\n",
    "plt.figure(figsize=(15, 5))\n",
    "plt.subplot(121)\n",
    "plt.plot(length / 1e3, np.abs(k) ** 2, label=\"k\")\n",
    "plt.plot(length / 1e3, np.abs(t) ** 2, label=\"t\")\n",
    "plt.xlabel(\"Wavelength (nm)\")\n",
    "plt.ylabel(\"Magnitude Squared\")\n",
    "plt.title(\"Crossover at $\\lambda \\approx 1550nm$\")\n",
    "plt.legend()\n",
    "\n",
    "plt.subplot(122)\n",
    "plt.plot(length / 1e3, np.unwrap(np.angle(k)), label=\"k\")\n",
    "plt.plot(length / 1e3, -np.unwrap(np.angle(t)), label=\"t\")\n",
    "plt.xlabel(\"length (um)\")\n",
    "plt.ylabel(\"Magnitude Squared\")\n",
    "plt.title(\"Crossover at $\\lambda \\approx 1550nm$\")\n",
    "plt.legend()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "c50 = gs.coupler(length=18, gap=0.25, width=0.45)\n",
    "wavelength = np.linspace(1500, 1600, 500)\n",
    "k = c50.predict((1, 4), wavelength)\n",
    "t = c50.predict((1, 3), wavelength)\n",
    "\n",
    "plt.figure(figsize=(15, 5))\n",
    "plt.subplot(121)\n",
    "plt.plot(wavelength, np.abs(k) ** 2, label=\"k\")\n",
    "plt.plot(wavelength, np.abs(t) ** 2, label=\"t\")\n",
    "pltAttr(\"Wavelength (nm)\", \"Magnitude Squared\", \"Crossover at $\\lambda \\approx 1550nm$\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "hr = gs.coupler_ring(length_x=2e3, width=0.45)\n",
    "gap = np.linspace(0.5, 3, 40) * 1e3\n",
    "wavelength = 1550\n",
    "hr.update(gap=gap)\n",
    "\n",
    "k = hr.predict((1, 4), wavelength)\n",
    "t = hr.predict((1, 3), wavelength)\n",
    "\n",
    "plt.figure(figsize=(15, 5))\n",
    "plt.subplot(121)\n",
    "plt.plot(gap / 1e3, np.abs(k) ** 2, label=\"k\")\n",
    "plt.plot(gap / 1e3, np.abs(t) ** 2, label=\"t\")\n",
    "plt.xlabel(\"coupler gap (nm)\")\n",
    "plt.ylabel(\"Magnitude Squared\")\n",
    "plt.title(\"2 mm coupling $\\lambda=1550$\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "c = gs.coupler_ring(length_x=20, wg_width=0.45, gap=0.45)\n",
    "wavelength = np.linspace(1500, 1600, 500)\n",
    "k = c.predict((1, 4), wavelength)\n",
    "t = c.predict((1, 3), wavelength)\n",
    "\n",
    "plt.figure(figsize=(15, 5))\n",
    "plt.subplot(121)\n",
    "plt.plot(wavelength, np.abs(k) ** 2, label=\"k\")\n",
    "plt.plot(wavelength, np.abs(t) ** 2, label=\"t\")\n",
    "plt.ylabel(\"Magnitude Squared\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "plt.plot(wavelength, np.abs(k) ** 2 * 100, label=\"k\")\n",
    "plt.ylabel(\"Coupling (%)\")\n",
    "plt.xlabel(\"wavelength (nm)\")\n",
    "plt.title(\"20um long 450nm wide 450nm gap straight waveguides\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.10"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
