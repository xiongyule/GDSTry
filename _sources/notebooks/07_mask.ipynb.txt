{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "0fd5fd63-4798-4187-8315-f6112b7b4d7e",
   "metadata": {},
   "source": [
    "# Reticle assembly\n",
    "\n",
    "With gdsfactory you can easily go from a Component, to a Component sweep, to a top level Component full of subcomponents.\n",
    "\n",
    "## Test protocols\n",
    "\n",
    "To measure your reticle / die after fabrication you need to decide your test configurations. This includes things like:\n",
    "\n",
    "- `Individual input and output fibers` versus `fiber array`. I recommend `fiber array` for easier testing and higher throughtput, but also understand the flexibility of single fibers for some cases.\n",
    "- Fiber array pitch (127um or 250um) if using a fiber array.\n",
    "- Pad pitch for DC and RF high speed probes (100, 125, 150, 200um). Probe configuration (GSG, GS ...)\n",
    "- Test layout for DC, RF and optical fibers.\n",
    "\n",
    "\n",
    "To enable automatic testing you need to add labels to all the devices that you want to test. GDS labels are not fabricated and are only visible in the GDS file.\n",
    "\n",
    "Lets show some different automatic labeling schemas:\n",
    "\n",
    "1. SiEPIC ubc Ebeam PDK schema, labels one of the grating couplers from the fiber array.\n",
    "2. `add_label_yaml` includes a YAML based Label with all testing information.\n",
    "3. EHVA automatic testers, include a Label component declaration as described in this [doc](https://drive.google.com/file/d/1kbQNrVLzPbefh3by7g2s865bcsA2vl5l/view)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7faa794a",
   "metadata": {},
   "source": [
    "### 1. SiEPIC labels"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c6d17c78",
   "metadata": {},
   "outputs": [],
   "source": [
    "import gdsfactory as gf\n",
    "from gdsfactory.labels import add_label_yaml, add_label_ehva\n",
    "\n",
    "gf.config.set_plot_options(show_subports=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3054361e",
   "metadata": {},
   "outputs": [],
   "source": [
    "mmi = gf.components.mmi2x2()\n",
    "mmi_te_siepic = gf.labels.add_fiber_array_siepic(component=mmi)\n",
    "mmi_te_siepic"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e1d20c1e",
   "metadata": {},
   "outputs": [],
   "source": [
    "mmi_te_siepic.get_labels(depth=1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d6027b65",
   "metadata": {},
   "source": [
    "### 2. YAML labels"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f151e1d6",
   "metadata": {},
   "outputs": [],
   "source": [
    "mmi = gf.components.mmi2x2()\n",
    "mmi_te_yaml = gf.routing.add_fiber_array(mmi, get_input_labels_function=None)\n",
    "add_label_yaml(component=mmi_te_yaml)\n",
    "mmi_te_yaml"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e64625d0",
   "metadata": {},
   "outputs": [],
   "source": [
    "mmi_te_yaml.get_labels(depth=0)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4cf473bf",
   "metadata": {},
   "source": [
    "### 3. EHVA labels"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a8c06243",
   "metadata": {},
   "outputs": [],
   "source": [
    "mmi_te_ehva = gf.routing.add_fiber_array(mmi, get_input_labels_function=None)\n",
    "mmi_te_ehva.remove_labels(lambda x: True)\n",
    "add_label_ehva(component=mmi_te_ehva, die=\"mpw1\")\n",
    "mmi_te_ehva"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d1cd2659",
   "metadata": {},
   "outputs": [],
   "source": [
    "mmi_te_ehva.get_labels(depth=0)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ae8c6fe2",
   "metadata": {},
   "source": [
    "One advantage of the YAML and EHVA formats is that you can track any changes on the components directly from the GDS label, as the label already stores any changes of the child device, as well as any settings that you specify.\n",
    "\n",
    "Settings can have many levels of hierarchy, but you can still access any children setting with `:` notation.\n",
    "\n",
    "\n",
    "```\n",
    "grating_coupler:\n",
    "    function: grating_coupler_elliptical_trenches\n",
    "    settings:\n",
    "        polarization: te\n",
    "        taper_angle: 35\n",
    "\n",
    "```"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d5be6d43",
   "metadata": {},
   "outputs": [],
   "source": [
    "mmi = gf.components.mmi2x2(length_mmi=10)\n",
    "mmi_te_ehva = gf.routing.add_fiber_array(mmi, get_input_labels_function=None)\n",
    "mmi_te_ehva.remove_labels(lambda x: True)\n",
    "add_label_ehva(\n",
    "    component=mmi_te_ehva,\n",
    "    die=\"mpw1\",\n",
    "    metadata_include_parent=[\"grating_coupler:settings:polarization\"],\n",
    ")\n",
    "mmi_te_ehva"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d021b96d",
   "metadata": {},
   "outputs": [],
   "source": [
    "mmi_te_ehva.get_labels(depth=0)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "54305dea",
   "metadata": {},
   "source": [
    "## Pack\n",
    "\n",
    "Lets start with a resistance sweep, where you change the resistance width to measure sheet resistance."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "624be8bc-9d7f-40e8-9217-c0d9071471e9",
   "metadata": {},
   "outputs": [],
   "source": [
    "sweep = [gf.components.resistance_sheet(width=width) for width in [1, 10, 100]]\n",
    "m = gf.pack(sweep)\n",
    "c = m[0]\n",
    "c"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f5b98ad7",
   "metadata": {},
   "source": [
    "Then we add spirals with different lengths to measure waveguide propagation loss."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c23b51c3",
   "metadata": {},
   "outputs": [],
   "source": [
    "spiral = gf.components.spiral_inner_io_fiber_single()\n",
    "spiral"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b5a870bf-69d0-4088-83dc-c2a911bbdf70",
   "metadata": {},
   "outputs": [],
   "source": [
    "spiral_te = gf.routing.add_fiber_single(\n",
    "    gf.functions.rotate(gf.components.spiral_inner_io_fiber_single, 90)\n",
    ")\n",
    "spiral_te"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "292aeb23-52b7-4b95-af3f-1218fcb3e60e",
   "metadata": {},
   "outputs": [],
   "source": [
    "# which is equivalent to\n",
    "spiral_te = gf.compose(\n",
    "    gf.routing.add_fiber_single,\n",
    "    gf.functions.rotate90,\n",
    "    gf.components.spiral_inner_io_fiber_single,\n",
    ")\n",
    "c = spiral_te(length=10e3)\n",
    "c"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "28642192-edaa-47de-a70c-0a6b1c60ec87",
   "metadata": {},
   "outputs": [],
   "source": [
    "import gdsfactory as gf\n",
    "\n",
    "add_label_ehva_mpw1 = gf.partial(gf.labels.add_label_ehva, die=\"mpw1\")\n",
    "add_fiber_single_no_labels = gf.partial(\n",
    "    gf.routing.add_fiber_single, get_input_label_text_function=None\n",
    ")\n",
    "\n",
    "spiral_te = gf.compose(\n",
    "    add_label_ehva_mpw1,\n",
    "    add_fiber_single_no_labels,\n",
    "    gf.functions.rotate90,\n",
    "    gf.components.spiral_inner_io_fiber_single,\n",
    ")\n",
    "sweep = [spiral_te(length=length) for length in [10e3, 20e3, 30e3]]\n",
    "m = gf.pack(sweep)\n",
    "c = m[0]\n",
    "c"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "de11e81e-fed1-49c1-b3b1-3f38ca1d7e4b",
   "metadata": {},
   "source": [
    "Together with GDS labels that are not fabricated, you can also add some physical labels that will be fabricated.\n",
    "\n",
    "For example you can add prefix `S` at the `north-center` of each spiral using `text_rectangular` which is DRC clean and anchored on `nc` (north-center)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "163625c7-3446-43fb-9d79-21ba1b2ef84f",
   "metadata": {},
   "outputs": [],
   "source": [
    "text_metal3 = gf.partial(\n",
    "    gf.components.text_rectangular_multi_layer, layers=(gf.LAYER.M3,)\n",
    ")\n",
    "\n",
    "m = gf.pack(sweep, text=text_metal3, text_anchors=(\"nc\",), text_prefix=\"s\")\n",
    "c = m[0]\n",
    "c"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "67d3167c-9820-43a8-a8c3-d7db3f6bbb42",
   "metadata": {},
   "outputs": [],
   "source": [
    "text_metal2 = gf.partial(gf.components.text, layer=gf.LAYER.M2)\n",
    "\n",
    "m = gf.pack(sweep, text=text_metal2, text_anchors=(\"nc\",), text_prefix=\"s\")\n",
    "c = m[0]\n",
    "c"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "202f96c4-3534-492d-beb1-739b75a0caa2",
   "metadata": {},
   "source": [
    "## Grid\n",
    "\n",
    "You can also pack components with a constant spacing."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c0510675-a6a0-48ab-868b-147548c9baa9",
   "metadata": {},
   "outputs": [],
   "source": [
    "g = gf.grid(sweep)\n",
    "g"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ef5c0177-ba7d-4763-bd19-25b094dcaaa1",
   "metadata": {},
   "outputs": [],
   "source": [
    "gh = gf.grid(sweep, shape=(1, len(sweep)))\n",
    "gh"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f1b19b3c-ef2a-4684-a961-057e71d057fa",
   "metadata": {},
   "outputs": [],
   "source": [
    "gh_ymin = gf.grid(sweep, shape=(1, len(sweep)), align_y=\"ymin\")\n",
    "gh_ymin"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c906630b-d340-4f1f-9b6a-c88c39205d9d",
   "metadata": {},
   "source": [
    "You can also add text labels to each element of the sweep"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "28809b6e-2fa1-4ee0-96f8-9efec4a4c871",
   "metadata": {
    "vscode": {
     "languageId": "markdown"
    }
   },
   "outputs": [],
   "source": [
    "gh_ymin = gf.grid_with_text(\n",
    "    sweep, shape=(1, len(sweep)), align_y=\"ymin\", text=text_metal3\n",
    ")\n",
    "gh_ymin"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0f736cb1",
   "metadata": {},
   "source": [
    "You can modify the text by customizing the `text_function` that you pass to `grid_with_text`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7ebc2c96",
   "metadata": {
    "vscode": {
     "languageId": "markdown"
    }
   },
   "outputs": [],
   "source": [
    "gh_ymin_m2 = gf.grid_with_text(\n",
    "    sweep, shape=(1, len(sweep)), align_y=\"ymin\", text=text_metal2\n",
    ")\n",
    "gh_ymin_m2"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3b997412-a382-4ec5-8161-0598ea6ee774",
   "metadata": {},
   "source": [
    "You have 2 ways of defining a mask:\n",
    "\n",
    "1. in python\n",
    "2. in YAML\n",
    "\n",
    "\n",
    "## Component in python\n",
    "\n",
    "You can define a Component top cell reticle or die using `grid` and `pack` python functions."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "60bcbcf0-503d-43b9-ac9f-6bd8a744cea7",
   "metadata": {
    "vscode": {
     "languageId": "markdown"
    }
   },
   "outputs": [],
   "source": [
    "import gdsfactory as gf\n",
    "\n",
    "text_metal3 = gf.partial(\n",
    "    gf.components.text_rectangular_multi_layer, layers=(gf.LAYER.M3,)\n",
    ")\n",
    "grid = gf.partial(gf.grid_with_text, text=text_metal3)\n",
    "pack = gf.partial(gf.pack, text=text_metal3)\n",
    "\n",
    "gratings_sweep = [\n",
    "    gf.components.grating_coupler_elliptical(taper_angle=taper_angle)\n",
    "    for taper_angle in [20, 30, 40]\n",
    "]\n",
    "gratings = grid(gratings_sweep, text=None)\n",
    "gratings"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e689a444-8af9-45f7-b068-2411a3c1277f",
   "metadata": {},
   "outputs": [],
   "source": [
    "gratings_sweep = [\n",
    "    gf.components.grating_coupler_elliptical(taper_angle=taper_angle)\n",
    "    for taper_angle in [20, 30, 40]\n",
    "]\n",
    "gratings_loss_sweep = [\n",
    "    gf.components.grating_coupler_loss_fiber_single(grating_coupler=grating)\n",
    "    for grating in gratings_sweep\n",
    "]\n",
    "gratings = grid(\n",
    "    gratings_loss_sweep, shape=(1, len(gratings_loss_sweep)), spacing=(40, 0)\n",
    ")\n",
    "gratings"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d25e85bf-4b7d-4cbe-8b83-1f096438cd14",
   "metadata": {},
   "outputs": [],
   "source": [
    "sweep_resistance = [\n",
    "    gf.components.resistance_sheet(width=width) for width in [1, 10, 100]\n",
    "]\n",
    "resistance = gf.pack(sweep_resistance)[0]\n",
    "resistance"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8080baf6-5426-4f0c-87e4-a4be3b1a455b",
   "metadata": {},
   "outputs": [],
   "source": [
    "spiral_te = gf.compose(\n",
    "    gf.routing.add_fiber_single,\n",
    "    gf.functions.rotate90,\n",
    "    gf.components.spiral_inner_io_fiber_single,\n",
    ")\n",
    "sweep_spirals = [spiral_te(length=length) for length in [10e3, 20e3, 30e3]]\n",
    "spirals = gf.pack(sweep_spirals)[0]\n",
    "spirals"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "247f7734-9691-4e0b-92ab-27b6eb0d88f5",
   "metadata": {},
   "outputs": [],
   "source": [
    "mask = gf.pack([spirals, resistance, gratings])[0]\n",
    "mask"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "09a22557-34bc-42fe-8fcc-31cd887a2ee5",
   "metadata": {},
   "source": [
    "As you can see you can define your mask in a single line.\n",
    "\n",
    "For more complex mask, you can also create a new cell to build up more complexity"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e78cf725-1243-42c4-b945-f1ab4464080e",
   "metadata": {},
   "outputs": [],
   "source": [
    "@gf.cell\n",
    "def mask():\n",
    "    c = gf.Component()\n",
    "    c << gf.pack([spirals, resistance, gratings])[0]\n",
    "    c << gf.components.seal_ring(c.bbox)\n",
    "    return c\n",
    "\n",
    "\n",
    "c = mask(cache=False)\n",
    "c"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8c8bfba4",
   "metadata": {},
   "source": [
    "## Metadata\n",
    "\n",
    "When saving GDS files is also convenient to store the metadata settings that you used to generate the GDS file."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3d7a73db-0d7b-446a-b43d-05e64d002bb1",
   "metadata": {},
   "outputs": [],
   "source": [
    "gdspath = c.write_gds_with_metadata(gdsdir=\"extra\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b36c5ad4-e2de-4751-8d02-5f5510ee6346",
   "metadata": {},
   "outputs": [],
   "source": [
    "yaml_path = gdspath.with_suffix(\".yml\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "849dbc8a-d702-4163-bd33-68acf300928b",
   "metadata": {},
   "outputs": [],
   "source": [
    "labels_path = gf.labels.write_labels.write_labels_klayout(\n",
    "    gdspath=gdspath, layer_label=(201, 0)\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "18d44fd2-b9d9-42a5-a563-c8eedf6fa723",
   "metadata": {},
   "outputs": [],
   "source": [
    "from omegaconf import OmegaConf\n",
    "\n",
    "mask_metadata = OmegaConf.load(yaml_path)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "92de97d6-064b-45ea-91c5-c8125dba4bb2",
   "metadata": {},
   "outputs": [],
   "source": [
    "test_metadata = tm = gf.labels.merge_test_metadata(\n",
    "    labels_path=labels_path, mask_metadata=mask_metadata\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "60c84507-5366-4fa9-8fc8-8850ba344f15",
   "metadata": {},
   "outputs": [],
   "source": [
    "tm.keys()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "29417bda-84bd-44f2-b562-eead25e70645",
   "metadata": {},
   "source": [
    "```\n",
    "\n",
    "CSV labels  ------|\n",
    "                  |--> merge_test_metadata dict\n",
    "                  |\n",
    "YAML metatada  ---\n",
    "\n",
    "```"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "30a2031d-780d-4ea5-b2df-d06aa170b4c0",
   "metadata": {},
   "outputs": [],
   "source": [
    "spiral_names = [s for s in test_metadata.keys() if s.startswith(\"spiral\")]\n",
    "spiral_names"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ec394506-143b-4831-ae38-06a1d8d5896b",
   "metadata": {},
   "outputs": [],
   "source": [
    "spiral_lengths = [\n",
    "    test_metadata[spiral_name].info.length for spiral_name in spiral_names\n",
    "]\n",
    "spiral_lengths"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ef3bbdfc-026b-49a6-a5a9-b9c2c7142df5",
   "metadata": {},
   "outputs": [],
   "source": [
    "gc_names = [s for s in test_metadata.keys() if s.startswith(\"grating\")]\n",
    "gc_names"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "88fb84ba-b7fb-41e3-956c-b9fb55454f38",
   "metadata": {},
   "outputs": [],
   "source": [
    "gc_taper_angles = [test_metadata[name].full.taper_angle for name in gc_names]\n",
    "gc_taper_angles"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0c911100-991c-4f6f-8eb9-a3a35704c633",
   "metadata": {},
   "source": [
    "## Component in YAML\n",
    "\n",
    "You can also define your component in YAML format thanks to `gdsfactory.read.from_yaml`\n",
    "\n",
    "You need to define:\n",
    "\n",
    "- instances\n",
    "- placements\n",
    "\n",
    "and you can leverage:\n",
    "\n",
    "1. `pack_doe`\n",
    "2. `pack_doe_grid`"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7a6853f9-1a3e-4b33-906d-2b11cc2580d8",
   "metadata": {},
   "source": [
    "### 1. pack_doe\n",
    "\n",
    "`pack_doe` places components as compact as possible"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d2cbd3c8",
   "metadata": {},
   "source": [
    "When running this tutorial make sure you UNCOMMENT this line `%matplotlib widget` so you can live update your changes in the YAML file\n",
    "\n",
    "`# %matplotlib widget`  -> `%matplotlib widget`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8c6dbf81",
   "metadata": {},
   "outputs": [],
   "source": [
    "# %matplotlib widget\n",
    "\n",
    "import ipywidgets\n",
    "from IPython.display import clear_output\n",
    "import matplotlib.pyplot as plt\n",
    "import gdsfactory as gf\n",
    "\n",
    "x = ipywidgets.Textarea(rows=20, columns=480)\n",
    "\n",
    "x.value = \"\"\"\n",
    "name: mask_grid\n",
    "\n",
    "instances:\n",
    "  rings:\n",
    "    component: pack_doe\n",
    "    settings:\n",
    "      doe: ring_single\n",
    "      settings:\n",
    "        radius: [30, 50, 20, 40]\n",
    "        length_x: [1, 2, 3]\n",
    "      do_permutations: True\n",
    "      function:\n",
    "        function: add_fiber_array\n",
    "        settings:\n",
    "            fanout_length: 200\n",
    "\n",
    "  mzis:\n",
    "    component: pack_doe\n",
    "    settings:\n",
    "      doe: mzi\n",
    "      settings:\n",
    "        delta_length: [10, 100]\n",
    "      function: add_fiber_array\n",
    "\n",
    "placements:\n",
    "  rings:\n",
    "    xmin: 50\n",
    "\n",
    "  mzis:\n",
    "    xmin: rings,east\n",
    "\"\"\"\n",
    "\n",
    "out = ipywidgets.Output()\n",
    "display(x, out)\n",
    "\n",
    "\n",
    "def f(change, out=out):\n",
    "    try:\n",
    "        c = gf.read.from_yaml(change[\"new\"])\n",
    "        # clear_output()\n",
    "        fig = c.plot()\n",
    "        c.show(show_ports=True)\n",
    "        out.clear_output()\n",
    "    except Exception as e:\n",
    "        out.clear_output()\n",
    "        with out:\n",
    "            display(e)\n",
    "\n",
    "\n",
    "x.observe(f, \"value\")\n",
    "f({\"new\": x.value})"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6e29d5f3-8ba7-48e8-91a4-3578d7ff18b3",
   "metadata": {},
   "source": [
    "### 2. pack_doe_grid\n",
    "\n",
    "`pack_doe_grid` places each component on a regular grid"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4c472fea-7a10-46ba-ac63-ae624df8081f",
   "metadata": {},
   "outputs": [],
   "source": [
    "x.value = \"\"\"\n",
    "name: mask_compact\n",
    "\n",
    "instances:\n",
    "  rings:\n",
    "    component: pack_doe\n",
    "    settings:\n",
    "      doe: ring_single\n",
    "      settings:\n",
    "        radius: [30, 50, 20, 40]\n",
    "        length_x: [1, 2, 3]\n",
    "      do_permutations: True\n",
    "      function:\n",
    "        function: add_fiber_array\n",
    "        settings:\n",
    "            fanout_length: 200\n",
    "\n",
    "\n",
    "  mzis:\n",
    "    component: pack_doe_grid\n",
    "    settings:\n",
    "      doe: mzi\n",
    "      settings:\n",
    "        delta_length: [10, 100]\n",
    "      do_permutations: True\n",
    "      spacing: [10, 10]\n",
    "      function: add_fiber_array\n",
    "\n",
    "placements:\n",
    "  rings:\n",
    "    xmin: 50\n",
    "\n",
    "  mzis:\n",
    "    xmin: rings,east\n",
    "\"\"\"\n",
    "\n",
    "display(x, out)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8a998fea-911f-4dc6-85d6-56fce034785f",
   "metadata": {},
   "outputs": [],
   "source": [
    "import gdsfactory as gf\n",
    "\n",
    "\n",
    "def mzi_te(**kwargs):\n",
    "    gc = gf.c.grating_coupler_elliptical_tm()\n",
    "    c = gf.c.mzi_phase_shifter_top_heater_metal(delta_length=40)\n",
    "    c = gf.routing.add_fiber_single(\n",
    "        c, get_input_label_text_function=None, grating_coupler=gc\n",
    "    )\n",
    "    gf.labels.add_label_yaml(c)\n",
    "    c = c.rotate(-90)\n",
    "    return c\n",
    "\n",
    "\n",
    "# Lets write a mask\n",
    "c = gf.grid(\n",
    "    [\n",
    "        mzi_te(),\n",
    "        mzi_te(),\n",
    "        gf.functions.rotate(mzi_te),\n",
    "        gf.labels.add_label_yaml(\n",
    "            gf.functions.mirror(gf.routing.add_fiber_single(gf.components.mmi1x2))\n",
    "        ),\n",
    "    ]\n",
    ")\n",
    "gdspath = c.write_gds(\"mask.gds\")\n",
    "csvpath = gf.labels.write_labels.write_labels_gdspy(gdspath, prefix=\"component_name\")\n",
    "c"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9314feca-bf30-47ec-a6a2-324c24314d32",
   "metadata": {},
   "source": [
    "Lets add some `blue` markers to make sure we can find all the grating couplers that we need to test."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0512badf-7a0d-4201-a1ec-89a7b05a7ead",
   "metadata": {},
   "outputs": [],
   "source": [
    "from gdsfactory.read.labels import read_labels_yaml, add_port_markers\n",
    "\n",
    "# You can make sure that all the ports will be tested by adding port markers\n",
    "add_port_markers(gdspath=gdspath, csvpath=csvpath, marker_size=40)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c7a07b72-a5d4-42d1-af81-bc8b7031b7cc",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
