{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Layers\n",
    "\n",
    "gdsfactory includes a generic example Technology in `gdsfactory.tech` that you can use as an inspiration to create your own.\n",
    "\n",
    "\n",
    "Each foundry uses different GDS numbers for each process step.\n",
    "\n",
    "We follow the generic layer numbers from the book \"Silicon Photonics Design: From Devices to Systems Lukas Chrostowski, Michael Hochberg\".\n",
    "\n",
    "| GDS (layer, purpose) | layer_name | Description                                                 |\n",
    "| -------------------- | ---------- | ----------------------------------------------------------- |\n",
    "| 1 , 0                | WG         | 220 nm Silicon core                                         |\n",
    "| 2 , 0                | SLAB150    | 150nm Silicon slab (70nm shallow Etch for grating couplers) |\n",
    "| 3 , 0                | SLAB90     | 90nm Silicon slab (for modulators)                          |\n",
    "| 4, 0                 | DEEPTRENCH | Deep trench                                                 |\n",
    "| 47, 0                | MH         | heater                                                      |\n",
    "| 41, 0                | M1         | metal 1                                                     |\n",
    "| 45, 0                | M2         | metal 2                                                     |\n",
    "| 40, 0                | VIAC       | VIAC to contact Ge, NPP or PPP                              |\n",
    "| 44, 0                | VIA1       | VIA1                                                        |\n",
    "| 46, 0                | PADOPEN    | Bond pad opening                                            |\n",
    "| 51, 0                | UNDERCUT   | Undercut                                                    |\n",
    "| 66, 0                | TEXT       | Text markup                                                 |\n",
    "| 64, 0                | FLOORPLAN  | Mask floorplan                                              |\n",
    "\n",
    "Layers are available in `gf.LAYER` as `gf.LAYER.WG`, `gf.LAYER.WGCLAD`\n",
    "\n",
    "\n",
    "![layer stack](https://i.imgur.com/GUb1Kav.png)\n",
    "\n",
    "\n",
    "A GDS has different layers to describe the different fabrication process steps.\n",
    "\n",
    "GDS layers have 2 integer numbers: GDSlayer, GDSpurpose\n",
    "\n",
    "Klayout shows Layers with a color, style and transparency when showing GDS layouts."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import gdsfactory as gf"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "c = gf.layers.LAYER_COLORS.preview()\n",
    "c"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "layer_wg = gf.LAYER.WG\n",
    "print(layer_wg)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Extract layers\n",
    "\n",
    "You can also extract layers using the `extract` function. This function returns a new flattened Component that contains the extracted layers.\n",
    "A flat Component does not have references, and all the polygons are absorbed by the top cell."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "extract = c.extract(layers=(gf.LAYER.M1, gf.LAYER.VIAC))\n",
    "extract"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Remove layers\n",
    "\n",
    "You can remove layers using the `remove_layers()` function."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "removed = extract.remove_layers(layers=(gf.LAYER.VIAC,))\n",
    "removed"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Remap layers\n",
    "\n",
    "You can remap (change the polygons from one layer to another layer) using the `remap_layer`, which will return a new `Component`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "c = gf.components.straight(layer=(2, 0))\n",
    "c"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "remap = c.remap_layers(layermap={(2, 0): gf.LAYER.WGN})\n",
    "remap"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## LayerStack\n",
    "\n",
    "Each layer also includes the information of thickness and position of each layer.\n",
    "\n",
    "This LayerStack can be used for:\n",
    "\n",
    "- render a 3D image\n",
    "- FDTD simulations"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "c = gf.layers.LAYER_COLORS.preview()\n",
    "c"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from gdsfactory.tech import LayerStack, LayerLevel, LAYER\n",
    "\n",
    "\n",
    "def get_layer_stack_generic(\n",
    "    thickness_silicon_core: float = 220e-3, thickness_cladding: float = 3.0\n",
    ") -> LayerStack:\n",
    "    \"\"\"Returns generic LayerStack.\n",
    "    based on paper https://www.degruyter.com/document/doi/10.1515/nanoph-2013-0034/html\n",
    "    \"\"\"\n",
    "    return LayerStack(\n",
    "        layers=dict(\n",
    "            core=LayerLevel(\n",
    "                layer=LAYER.WG,\n",
    "                thickness=thickness_silicon_core,\n",
    "                zmin=0.0,\n",
    "                material=\"si\",\n",
    "            ),\n",
    "            clad=LayerLevel(\n",
    "                layer=LAYER.WGCLAD,\n",
    "                thickness=thickness_cladding,\n",
    "                zmin=0.0,\n",
    "                material=\"sio2\",\n",
    "            ),\n",
    "            slab150=LayerLevel(\n",
    "                layer=LAYER.SLAB150,\n",
    "                thickness=150e-3,\n",
    "                zmin=0,\n",
    "                material=\"si\",\n",
    "            ),\n",
    "            slab90=LayerLevel(\n",
    "                layer=LAYER.SLAB90,\n",
    "                thickness=90e-3,\n",
    "                zmin=0.0,\n",
    "                material=\"si\",\n",
    "            ),\n",
    "            nitride=LayerLevel(\n",
    "                layer=LAYER.WGN,\n",
    "                thickness=350e-3,\n",
    "                zmin=220e-3 + 100e-3,\n",
    "                material=\"sin\",\n",
    "            ),\n",
    "            ge=LayerLevel(\n",
    "                layer=LAYER.GE,\n",
    "                thickness=500e-3,\n",
    "                zmin=thickness_silicon_core,\n",
    "                material=\"ge\",\n",
    "            ),\n",
    "            via_contact=LayerLevel(\n",
    "                layer=LAYER.VIAC,\n",
    "                thickness=1100e-3,\n",
    "                zmin=90e-3,\n",
    "                material=\"Aluminum\",\n",
    "            ),\n",
    "            metal1=LayerLevel(\n",
    "                layer=LAYER.M1,\n",
    "                thickness=750e-3,\n",
    "                zmin=thickness_silicon_core + 1100e-3,\n",
    "                material=\"Aluminum\",\n",
    "            ),\n",
    "            heater=LayerLevel(\n",
    "                layer=LAYER.HEATER,\n",
    "                thickness=750e-3,\n",
    "                zmin=thickness_silicon_core + 1100e-3,\n",
    "                material=\"TiN\",\n",
    "            ),\n",
    "            viac=LayerLevel(\n",
    "                layer=LAYER.VIA1,\n",
    "                thickness=1500e-3,\n",
    "                zmin=thickness_silicon_core + 1100e-3 + 750e-3,\n",
    "                material=\"Aluminum\",\n",
    "            ),\n",
    "            metal2=LayerLevel(\n",
    "                layer=LAYER.M2,\n",
    "                thickness=2000e-3,\n",
    "                zmin=thickness_silicon_core + 1100e-3 + 750e-3 + 1.5,\n",
    "                material=\"Aluminum\",\n",
    "            ),\n",
    "        )\n",
    "    )\n",
    "\n",
    "\n",
    "layer_stack220 = get_layer_stack_generic(thickness_silicon_core=0.220)\n",
    "\n",
    "c = gf.components.straight_heater_metal(length=40)\n",
    "c"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "scene = c.to_3d(layer_stack=layer_stack220)\n",
    "scene.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# lets assume we have 9um silicon instead of 0.220um, You will see a much thicker waveguide under the metal heater.\n",
    "layer_stack9000 = get_layer_stack_generic(thickness_silicon_core=9.0)\n",
    "scene = c.to_3d(layer_stack=layer_stack9000)\n",
    "scene.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 3D rendering\n",
    "\n",
    "To render components in 3D you will need to define two things:\n",
    "\n",
    "1. LayerStack: for each layer contains thickness of each material and z position\n",
    "2. LayerColors: for each layer contains colors (this file is the same that Klayout uses). You can load it with `gf.layers.load_lyp()`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "heater = gf.components.straight_heater_metal(length=50)\n",
    "heater"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "scene = heater.to_3d()\n",
    "scene.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 2.5D Klayout view\n",
    "\n",
    "You can also get the script in klayout 2.D view."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from gdsfactory.tech import LAYER_STACK\n",
    "\n",
    "LAYER_STACK.get_klayout_3d_script()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Then you go go Tools → Manage Technologies\n",
    "\n",
    "\n",
    "![klayout](https://i.imgur.com/KCcMRBO.png)\n",
    "\n",
    "and Paste the script\n",
    "\n",
    "![paste](https://i.imgur.com/CoTythB.png)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Klayout cross-section\n",
    "\n",
    "You can also install the [klayout cross-section plugin](https://gdsfactory.github.io/klayout_pyxs/README.html)\n",
    "\n",
    "![xsection](https://i.imgur.com/xpPS8fM.png)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "and customize the cross_section script that you need to use for your technology."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "lines_to_next_cell": 2
   },
   "outputs": [],
   "source": [
    "import pathlib\n",
    "from gdsfactory.geometry.get_xsection_script import get_xsection_script\n",
    "from gdsfactory.tech import LAYER\n",
    "\n",
    "\n",
    "nm = 1e-3\n",
    "if __name__ == \"__main__\":\n",
    "    script = get_xsection_script(\n",
    "        t_box=2.0,\n",
    "        t_slab=110 * nm,\n",
    "        t_si=220 * nm,\n",
    "        t_ge=400 * nm,\n",
    "        t_nitride=400 * nm,\n",
    "        h_etch1=0.07,\n",
    "        h_etch2=0.06,\n",
    "        h_etch3=0.09,\n",
    "        t_clad=0.6,\n",
    "        t_m1=0.5,\n",
    "        t_m2=0.5,\n",
    "        t_m3=2.0,\n",
    "        gap_m1_m2=0.6,\n",
    "        gap_m2_m3=0.3,\n",
    "        t_heater=0.1,\n",
    "        gap_oxide_nitride=0.82,\n",
    "        t_m1_oxide=0.6,\n",
    "        t_m2_oxide=2.0,\n",
    "        t_m3_oxide=0.5,\n",
    "        layer_wg=LAYER.WG,\n",
    "        layer_fc=LAYER.SLAB150,\n",
    "        layer_rib=LAYER.SLAB90,\n",
    "        layer_n=LAYER.N,\n",
    "        layer_np=LAYER.NP,\n",
    "        layer_npp=LAYER.NPP,\n",
    "        layer_p=LAYER.P,\n",
    "        layer_pp=LAYER.PP,\n",
    "        layer_ppp=LAYER.PPP,\n",
    "        layer_PDPP=LAYER.GEP,\n",
    "        layer_nitride=LAYER.WGN,\n",
    "        layer_Ge=LAYER.GE,\n",
    "        layer_GePPp=LAYER.GEP,\n",
    "        layer_GeNPP=LAYER.GEN,\n",
    "        layer_viac=LAYER.VIAC,\n",
    "        layer_viac_slot=LAYER.VIAC,\n",
    "        layer_m1=LAYER.M1,\n",
    "        layer_mh=LAYER.HEATER,\n",
    "        layer_via1=LAYER.VIA1,\n",
    "        layer_m2=LAYER.M2,\n",
    "        layer_via2=LAYER.VIA2,\n",
    "        layer_m3=LAYER.M3,\n",
    "        layer_open=LAYER.PADOPEN,\n",
    "    )\n",
    "\n",
    "    # script_path = pathlib.Path(__file__).parent.absolute() / \"xsection_planarized.pyxs\"\n",
    "    # script_path.write_text(script)\n",
    "    print(script)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "![xsection generic](https://i.imgur.com/H5Qiygc.png)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
