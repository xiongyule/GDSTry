{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "bbdf9c81-0609-4e87-bc68-561e022fd61c",
   "metadata": {},
   "source": [
    "# Import PDK\n",
    "\n",
    "## Import PDK in GDS format\n",
    "\n",
    "To import a PDK from GDS format into gdsfactory you need 2 things:\n",
    "\n",
    "- GDS file with all the cells that you want to import in the PDK (or separate GDS files, one per cell)\n",
    "- Klayout layer properties files, to define the Layers that you can use when creating new custom Components.\n",
    "\n",
    "GDS files are great for describing geometry thanks to the concept of References, where you store any geometry only once in memory.\n",
    "\n",
    "For storing device metadata (settings, port locations, port widths, port angles ...) there is no clear standard.\n",
    "\n",
    "`gdsfactory` stores the that metadata in `YAML` files, and also has functions to add pins\n",
    "\n",
    "- `Component.write_gds()` saves GDS\n",
    "- `Component.write_gds_metadata()` save GDS + YAML metadata"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "41cdfefd-cd4c-4354-b2eb-b453c6974102",
   "metadata": {},
   "outputs": [],
   "source": [
    "import gdsfactory as gf\n",
    "\n",
    "c = gf.components.mzi()\n",
    "c"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "23c537c6-45d1-4bf1-b26b-4a09e2550f90",
   "metadata": {},
   "source": [
    "You can write **GDS** files only"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f5ecd514-2f27-41cf-887c-42a46b6c8ab6",
   "metadata": {},
   "outputs": [],
   "source": [
    "gdspath = c.write_gds(\"extra/mzi.gds\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bc2f3682-14e0-4d40-85ce-4cca5885fbc4",
   "metadata": {},
   "source": [
    "Or **GDS** with **YAML** metadata information (ports, settings, cells ...)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "edf7bc41-5089-4799-911c-6460ae3bc0b1",
   "metadata": {},
   "outputs": [],
   "source": [
    "gdspath = c.write_gds_with_metadata(\"extra/mzi.gds\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9a3c7014-1623-441d-86b0-9730510f2c9a",
   "metadata": {},
   "source": [
    "This created a `mzi.yml` file that contains:\n",
    "- ports\n",
    "- cells (flat list of cells)\n",
    "- info (function name, module, changed settings, full settings, default settings)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2b58db0d-c661-4b5b-9e89-32518747b510",
   "metadata": {},
   "outputs": [],
   "source": [
    "c.metadata.keys()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e1fa8437-3162-45de-8154-bd0b4cea21c1",
   "metadata": {},
   "source": [
    "You can read GDS files into gdsfactory thanks to the `import_gds` function\n",
    "\n",
    "`import_gds` reads the same GDS file from disk without losing any information"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "12dd6787-d042-45c4-8146-8e6d9aca450d",
   "metadata": {},
   "outputs": [],
   "source": [
    "gf.clear_cache()\n",
    "\n",
    "c = gf.import_gds(gdspath)\n",
    "c"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ede99d15-fa43-4a76-afd5-9cd3a9121904",
   "metadata": {},
   "outputs": [],
   "source": [
    "import gdsfactory as gf\n",
    "\n",
    "c2 = gf.import_gds(gdspath, name=\"mzi_sample\")\n",
    "c2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6d5f8a53-7ed1-4408-85e7-e86011cf451e",
   "metadata": {},
   "outputs": [],
   "source": [
    "c2.name"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "64134499-6d8f-46a7-9161-7a0070af81cf",
   "metadata": {},
   "outputs": [],
   "source": [
    "c3 = gf.routing.add_fiber_single(c2)\n",
    "c3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8e86401c-754f-4552-ad8f-7ad0fbeb0f26",
   "metadata": {},
   "outputs": [],
   "source": [
    "gdspath = c3.write_gds_with_metadata(\"extra/pdk.gds\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "028114a5-47aa-4533-bcf8-2e37dcad720e",
   "metadata": {},
   "outputs": [],
   "source": [
    "gf.labels.write_labels.write_labels_klayout(gdspath, layer_label=gf.LAYER.LABEL)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7809ac64-5ad6-453b-9d15-6f2981139610",
   "metadata": {},
   "source": [
    "### add ports from pins\n",
    "\n",
    "Sometimes the GDS does not have YAML metadata, therefore you need to figure out the port locations, widths and orientations.\n",
    "\n",
    "gdsfactory provides you with functions that will add ports to the component by looking for pins shapes on a specific layers (port_markers or pins)\n",
    "\n",
    "There are different pin standards supported to automatically add ports to components:\n",
    "\n",
    "- PINs towards the inside of the port (port at the outer part of the PIN)\n",
    "- PINs with half of the pin inside and half outside (port at the center of the PIN)\n",
    "- PIN with only labels (no shapes). You have to manually specify the width of the port.\n",
    "\n",
    "\n",
    "Lets add pins, save a GDS and then import it back."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3fdedf7c-653c-4d1b-a153-3a046bb5c3a4",
   "metadata": {},
   "outputs": [],
   "source": [
    "import gdsfactory as gf\n",
    "\n",
    "c = gf.components.straight(\n",
    "    decorator=gf.add_pins.add_pins\n",
    ")  # add pins inside the component\n",
    "c"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "19a0495e-167d-462b-b9be-00b9c3742496",
   "metadata": {},
   "outputs": [],
   "source": [
    "gdspath = c.write_gds(\"extra/wg.gds\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3b750944-d67d-4d2a-89cc-adf1a6b53649",
   "metadata": {},
   "outputs": [],
   "source": [
    "gf.clear_cache()\n",
    "c2 = gf.import_gds(gdspath)\n",
    "c2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a4c82900-c039-48b9-a80f-a830d7cc5682",
   "metadata": {},
   "outputs": [],
   "source": [
    "c2.ports  # import_gds does not automatically add the pins"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ae92153b-2980-4a1f-add9-3c1e096562a5",
   "metadata": {},
   "outputs": [],
   "source": [
    "c3 = gf.import_gds(gdspath, decorator=gf.add_ports.add_ports_from_markers_inside)\n",
    "c3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1c753748-291f-4387-afb7-9b734f13ba2c",
   "metadata": {},
   "outputs": [],
   "source": [
    "c3.ports"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d39c98f8-1f60-47dd-9acc-4a0820d7e1cc",
   "metadata": {},
   "source": [
    "Foundries provide PDKs in different formats and commercial tools.\n",
    "\n",
    "The easiest way to import a PDK into gdsfactory is to\n",
    "\n",
    "1. have each GDS cell into a separate GDS file\n",
    "2. have one GDS file with all the cells inside\n",
    "3. Have a klayout layermap. Makes easier to create the layermap.\n",
    "\n",
    "With that you can easily create the PDK as as python package.\n",
    "\n",
    "Thanks to having a gdsfactory PDK as a python package you can\n",
    "\n",
    "- version control your PDK using GIT to keep track of changes and work on a team\n",
    "    - write tests of your pdk components to avoid unwanted changes from one component to another.\n",
    "    - ensure you maintain the quality of the PDK with continuous integration checks\n",
    "    - pin the version of gdsfactory, so new updates of gdsfactory won't affect your code\n",
    "- name your PDK version using [semantic versioning](https://semver.org/). For example patches increase the last number (0.0.1 -> 0.0.2)\n",
    "- install your PDK easily `pip install pdk_fab_a` and easily interface with other tools\n",
    "\n",
    "\n",
    "\n",
    "To create a **Python** package you can start from a customizable template (thanks to cookiecutter)\n",
    "\n",
    "I usually create a python package by running this 2 commands inside a terminal\n",
    "\n",
    "```\n",
    "pip install cookiecutter\n",
    "cookiecutter https://github.com/joamatab/cookiecutter-pypackage-minimal\n",
    "```\n",
    "\n",
    "It will ask you some questions to fill in the template (name of the package being the most important)\n",
    "\n",
    "\n",
    "Then you can add the information about the GDS files and the Layers inside that package"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "60d5ef98-8451-411a-864b-04d349ca3809",
   "metadata": {},
   "outputs": [],
   "source": [
    "import gdsfactory as gf\n",
    "from gdsfactory.layers import lyp_to_dataclass\n",
    "from gdsfactory.config import PATH"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "33b9c8db-fa7a-48d7-859a-f0e3038fd4f2",
   "metadata": {},
   "outputs": [],
   "source": [
    "print(lyp_to_dataclass(PATH.klayout_lyp))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7db84f41-e038-43db-9bc7-b7ed0b0d32f2",
   "metadata": {},
   "outputs": [],
   "source": [
    "# lets create a sample PDK (for demo purposes only) using GDSfactory\n",
    "# if the PDK is in a commercial tool you can also do this. Make sure you save a single pdk.gds\n",
    "sample_pdk_cells = gf.grid(\n",
    "    [\n",
    "        gf.components.straight,\n",
    "        gf.components.bend_euler,\n",
    "        gf.components.grating_coupler_elliptical,\n",
    "    ]\n",
    ")\n",
    "sample_pdk_cells.write_gds(\"extra/pdk.gds\")\n",
    "sample_pdk_cells"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "213f9c07-3acb-4593-92e5-eef3a9975349",
   "metadata": {},
   "outputs": [],
   "source": [
    "sample_pdk_cells.get_dependencies()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d87bcb81-39ec-4773-a8ae-3e461b9bc73c",
   "metadata": {},
   "outputs": [],
   "source": [
    "# we write the sample PDK into a single GDS file\n",
    "gf.clear_cache()\n",
    "gf.write_cells.write_cells(gdspath=\"extra/pdk.gds\", dirpath=\"extra/gds\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "72be214d-c0e9-420f-bb27-cb8612f3a23e",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Lets generate the script that we need to have to each GDS cell into gdsfactory\n",
    "import gdsfactory as gf\n",
    "\n",
    "print(gf.write_cells.get_import_gds_script(\"extra/gds\"))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1f54bf5c-17d9-4d27-9f2c-468fd7dde7be",
   "metadata": {},
   "source": [
    "You can also include the code to plot each fix cell in the docstring."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8c67b518-2ef8-41ba-9755-7e16bac4efb3",
   "metadata": {},
   "outputs": [],
   "source": [
    "print(gf.write_cells.get_import_gds_script(\"extra/gds\", module=\"samplepdk.components\"))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "217e1396-80cf-43cb-aad2-2c8d79a43b6f",
   "metadata": {},
   "source": [
    "## Import PDK from other python packages\n",
    "\n",
    "### phidl\n",
    "\n",
    "To import a phidl pdk you can use the `gf.read.from_phidl`\n",
    "\n",
    "### dphox\n",
    "\n",
    "To import a dphox pdk you can use the `gf.read.from_dphox`\n",
    "\n",
    "### picwriter\n",
    "\n",
    "To import a picwriter pdk you can use the `gf.read.from_picwriter`\n",
    "\n",
    "### nazca\n",
    "\n",
    "To import a nazca pdk you can use the following code:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "602b3488-e3a5-4d0a-b849-4919b8574a33",
   "metadata": {
    "lines_to_next_cell": 2
   },
   "outputs": [],
   "source": [
    "from typing import Dict, Tuple\n",
    "from gdsfactory.component import Component\n",
    "\n",
    "\n",
    "def from_nazca(\n",
    "    cell,\n",
    "    layer_name_to_tuple: Dict[str, Tuple[int, int]],\n",
    "    port_layer: Tuple[int, int] = (1, 0),\n",
    ") -> Component:\n",
    "    \"\"\"Converts a nazca cell into a gdsfactory Component.\n",
    "\n",
    "    Make sure you install nazca.\n",
    "\n",
    "    Args:\n",
    "        cell: nazca cell.\n",
    "        layer_name_to_tuple: nazca layer name to gdslayer, gdspurpose.\n",
    "        port_layer: layer for the ports.\n",
    "    \"\"\"\n",
    "    import nazca as nd\n",
    "\n",
    "    c = Component(cell.name)\n",
    "    i = 0\n",
    "\n",
    "    for named_tuple in nd.cell_iter(cell, flat=True):\n",
    "        if named_tuple.cell_start:\n",
    "            for polygon, points, bbox in named_tuple.iters[\"polygon\"]:\n",
    "                if polygon.layer == \"bb_pin\":\n",
    "                    x0 = points[0][0]\n",
    "                    y0 = points[0][1]\n",
    "\n",
    "                    dx = points[1][0] - points[6][0]\n",
    "                    dy = points[1][1] - points[6][1]\n",
    "\n",
    "                    if dx > dy:\n",
    "                        width = dx\n",
    "                        if dx > 0:  # east\n",
    "                            orientation = 90\n",
    "                        else:\n",
    "                            orientation = 270\n",
    "                    else:\n",
    "                        width = dy\n",
    "                        if dy > 0:  # north\n",
    "                            orientation = 180\n",
    "                        else:\n",
    "                            orientation = 0\n",
    "\n",
    "                    name = f\"o{i}\"\n",
    "                    c.add_port(\n",
    "                        name=name,\n",
    "                        center=(x0, y0),\n",
    "                        width=width,\n",
    "                        orientation=orientation,\n",
    "                        layer=port_layer,\n",
    "                    )\n",
    "                    i += 1\n",
    "                c.add_polygon(points, layer=layer_name_to_tuple[polygon.layer])\n",
    "\n",
    "    c.auto_rename_ports()\n",
    "    return c\n",
    "\n",
    "\n",
    "def demo():\n",
    "    import nazca as nd\n",
    "    import nazca.demofab as demo\n",
    "    import pandas as pd\n",
    "\n",
    "    n = demo.deep.euler(angle=90).put()\n",
    "    df = pd.read_csv(demo.layer_file)\n",
    "\n",
    "    layer_name_to_tuple = dict(\n",
    "        Deep=(1, 0),\n",
    "        DeepTrench=(4, 0),\n",
    "        bb_pin=(501, 0),\n",
    "    )\n",
    "    c = from_nazca(n, layer_name_to_tuple=layer_name_to_tuple)\n",
    "    c.show(show_ports=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "52a7cef4-ac91-482b-b3bc-42bbcc7c7f05",
   "metadata": {},
   "source": [
    "## Foundry PDKs\n",
    "\n",
    "You can build PDKs for different foundries. PDKs contain some foundry IP (layer stack, Design Rules) and are available only under and NDA.\n",
    "For accessing the gdsfactory PDK please contact your foundry for access.\n",
    "\n",
    "\n",
    "Some PDKs are open source and publicly available:\n",
    "\n",
    "- [ubcpdk](https://github.com/gdsfactory/ubc)\n",
    "- [sky130](https://github.com/gdsfactory/skywater130)\n",
    "\n",
    "\n",
    "## Build your own PDK\n",
    "\n",
    "You can create a PDK as a python library using a cookiecutter template. For example, you can use this one.\n",
    "\n",
    "```\n",
    "pip install cookiecutter\n",
    "cookiecutter https://github.com/joamatab/cookiecutter-pypackage-minimal\n",
    "```\n",
    "\n",
    "Or you can fork the ubcpdk and create new Pcell functions that use the correct layers for your foundry. For example.\n",
    "\n",
    "```\n",
    "\n",
    "from pydantic import BaseModel\n",
    "\n",
    "\n",
    "class LayerMap(BaseModel):\n",
    "    WGCORE = (3, 0)\n",
    "    LABEL = (100, 0)\n",
    "    DEVREC: Layer = (68, 0)\n",
    "    LABEL: Layer = (10, 0)\n",
    "    PORT: Layer = (1, 10)  # PinRec\n",
    "    PORTE: Layer = (1, 11)  # PinRecM\n",
    "    FLOORPLAN: Layer = (99, 0)\n",
    "\n",
    "    TE: Layer = (203, 0)\n",
    "    TM: Layer = (204, 0)\n",
    "    TEXT: Layer = (66, 0)\n",
    "    LABEL_INSTANCE: Layer = (66, 0)\n",
    "\n",
    "\n",
    "LAYER = LayerMap()\n",
    "\n",
    "```\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "aa3e8593-2c22-4d33-8935-6a3e7488dca3",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
